name: Push docker image to GCR reusable workflow

on:
  workflow_call:
    inputs:
      image_name:
        required: true
        type: string
      branch_name:
        required: true
        type: string
      dockerfile:
        required: true
        type: string
    secrets:
      gcp_token:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
jobs:
  build:
    name: Build tag and push docker images to GCR.
    runs-on: ubuntu-latest
    steps:
      - name: Login to Gcloud using starkgate service account.
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: starkware-dev
          service_account_email: starkgate@starkware-dev.iam.gserviceaccount.com
          service_account_key: ${{ secrets.gcp_token }}

      - name: Configure Docker
        run: gcloud auth configure-docker --quiet

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Build and push images to GCR, with tag latest and git tag.
        if: ${{ inputs.branch_name == 'refs/heads/dev' }}
        run: |
          docker build . -t ${{ inputs.image_name }} -f ${{ inputs.dockerfile }} --build-arg BUILD_ENV=testing
          docker tag ${{ inputs.image_name }} ${{ inputs.image_name }}:${{ github.ref_name }}
          docker push ${{ inputs.image_name }}:${{ github.ref_name }}
          docker push ${{ inputs.image_name }}

      - name: Build and push images to GCR, with tag latest and git tag.
        if: ${{ inputs.branch_name == 'refs/heads/guy/master/dev_helm_deployment' }}
        run: |
          docker build . -t ${{ inputs.image_name }} -f ${{ inputs.dockerfile }} --build-arg BUILD_ENV=testing
          docker tag ${{ inputs.image_name }} ${{ inputs.image_name }}:${{ github.ref_name }}
          docker push ${{ inputs.image_name }}:${{ github.ref_name }}
          docker push ${{ inputs.image_name }}

      - name: Build with production env and push with mainnet and stable tags.
        if: ${{ inputs.branch_name == 'refs/heads/master' }}
        run: |
          docker build . -t ${{ inputs.image_name }}:stable -f ${{ inputs.dockerfile }} --build-arg BUILD_ENV=production
          docker tag ${{ inputs.image_name }}:stable ${{ inputs.image_name }}:${{ github.ref_name }}-mainnet

          docker push ${{ inputs.image_name }}:${{ github.ref_name }}-mainnet
          docker push ${{ inputs.image_name }}:stable

      - name: Build with testing env and push with goerli tag.
        if: ${{ inputs.branch_name == 'refs/heads/master' }}
        run: |
          docker build . -t ${{ inputs.image_name }} -f ${{ inputs.dockerfile }} --build-arg BUILD_ENV=testing
          docker tag ${{ inputs.image_name }} ${{ inputs.image_name }}:${{ github.ref_name }}-goerli

          docker push ${{ inputs.image_name }}:${{ github.ref_name }}-goerli

  deploy:
    if: ${{ inputs.branch_name == 'refs/heads/guy/master/dev_helm_deployment' }}
    name: Deploy dev env using helm upgrade
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup GKE cluster
        uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
        with:
          cluster_name: web-devs
          location: us-central1
          credentials: ${{ secrets.gcp_token }}
      - name: Helm tool installer
        uses: Azure/setup-helm@v2.0
      - name: Show directory
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2
        run: |
          helm plugin install https://starkware-third-party.s3.us-east-2.amazonaws.com/k8s/helm-s3/helm-s3-v0.9.2.tar.gz
          helm repo add starkware s3://starkware-third-party/helm-repo/charts
          helm repo update
          helm upgrade starkgate starkware/webapp-general-helm --namespace=starkgate-devnet-guy \
          --values deployment/development.yml \
          --set-file configMap.frontend.envs=.env.testing \
          --set frontend.image.tag=${{ github.ref_name }}
